#include <vector>
#include <stack>
using namespace std;

// Definition for a binary tree node.
// struct TreeNode {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
// };

class Solution {
public:
    // Recursive postorder traversal
    void postorderHelper(TreeNode* node, vector<int>& result) {
        if (!node) return;
        postorderHelper(node->left, result); // Visit the left subtree
        postorderHelper(node->right, result); // Visit the right subtree
        result.push_back(node->val);    // Visit the root
    }
    
    // Main function to call the recursive helper
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> result;
        postorderHelper(root, result);
        return result;
    }
    
    // Iterative postorder traversal
    vector<int> postorderTraversalIterative(TreeNode* root) {
        vector<int> result;
        if (!root) return result;
        
        stack<TreeNode*> stack1, stack2;
        stack1.push(root);
        
        while (!stack1.empty()) {
            TreeNode* node = stack1.top();
            stack1.pop();
            stack2.push(node);
            
            if (node->left) stack1.push(node->left);
            if (node->right) stack1.push(node->right);
        }
        
        while (!stack2.empty()) {
            result.push_back(stack2.top()->val);
            stack2.pop();
        }
        
        return result;
    }
};
